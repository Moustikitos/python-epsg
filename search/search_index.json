{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python epsglide package This package aims to perform simple requests to EPSG GeoRepository API and use associated geodesic computation or map projections. EPSG dataset requests and projection epslide provides several dataset classes to manage parameters and populate the toplevel class ProjectedCoordRefSystem . This toplevel class allow projection and contains other dataset classes to perform geodetic computations. >>> import math, epsglide >>> crs = epsglide.ProjectedCoordRefSystem(26730) >>> crs <ProjectedCoordRefSystem 26730: NAD27 / Alabama West> >>> point = epsglide.Geodetic(math.degrees(crs.lambda0), math.degrees(crs.phi0)) >>> crs(point) <US survey foot:3.281[X=152400.305 Y=0.000] alt=0.000> >>> crs(crs(point)) <lon=-087d18m0.00000s lat=+030d00m0.00000s alt=0.0> EPSG dataset conversion >>> osgb36 = epsglide.ProjectedCoordRefSystem(27700) >>> lla = osgb36(epsglide.Geographic(400000, -100000, 0)) >>> osgb36.GeodeticCoordRefSystem.to_wgs84(lla) <lon=-002d00m0.00000s lat=+049d00m2.50812s alt=-529.126> >>> lla <lon=-002d00m0.00000s lat=+049d00m0.00000s alt=0.0> Great circle computation >>> wgs84 = epsglide.dataset.Ellipsoid(7030) >>> dublin = epsglide.Geodetic(-6.272877, 53.344606, 105.) >>> london = epsglide.Geodetic(-0.127005, 51.518602, 0.) >>> dist = wgs84.distance(dublin, london) >>> dist <464.572km initial bearing=113.5\u00b0 final bearing118.3\u00b0> >>> wgs84.destination(dublin, dist) <lon=-000d07m37.21798s lat=+051d31m6.96719s end bearing=118.3\u00b0> >>> london <lon=-000d07m37.21800s lat=+051d31m6.96720s alt=0.0> Support this project","title":"Home"},{"location":"#python-epsglide-package","text":"This package aims to perform simple requests to EPSG GeoRepository API and use associated geodesic computation or map projections.","title":"Python epsglide package"},{"location":"#epsg-dataset-requests-and-projection","text":"epslide provides several dataset classes to manage parameters and populate the toplevel class ProjectedCoordRefSystem . This toplevel class allow projection and contains other dataset classes to perform geodetic computations. >>> import math, epsglide >>> crs = epsglide.ProjectedCoordRefSystem(26730) >>> crs <ProjectedCoordRefSystem 26730: NAD27 / Alabama West> >>> point = epsglide.Geodetic(math.degrees(crs.lambda0), math.degrees(crs.phi0)) >>> crs(point) <US survey foot:3.281[X=152400.305 Y=0.000] alt=0.000> >>> crs(crs(point)) <lon=-087d18m0.00000s lat=+030d00m0.00000s alt=0.0>","title":"EPSG dataset requests and projection"},{"location":"#epsg-dataset-conversion","text":">>> osgb36 = epsglide.ProjectedCoordRefSystem(27700) >>> lla = osgb36(epsglide.Geographic(400000, -100000, 0)) >>> osgb36.GeodeticCoordRefSystem.to_wgs84(lla) <lon=-002d00m0.00000s lat=+049d00m2.50812s alt=-529.126> >>> lla <lon=-002d00m0.00000s lat=+049d00m0.00000s alt=0.0>","title":"EPSG dataset conversion"},{"location":"#great-circle-computation","text":">>> wgs84 = epsglide.dataset.Ellipsoid(7030) >>> dublin = epsglide.Geodetic(-6.272877, 53.344606, 105.) >>> london = epsglide.Geodetic(-0.127005, 51.518602, 0.) >>> dist = wgs84.distance(dublin, london) >>> dist <464.572km initial bearing=113.5\u00b0 final bearing118.3\u00b0> >>> wgs84.destination(dublin, dist) <lon=-000d07m37.21798s lat=+051d31m6.96719s end bearing=118.3\u00b0> >>> london <lon=-000d07m37.21800s lat=+051d31m6.96720s alt=0.0>","title":"Great circle computation"},{"location":"#support-this-project","text":"","title":"Support this project"},{"location":"c-code/","text":"Module epsglide.src Unit Objects class Unit(ctypes.Structure) Represents a Unit structure in C code. Attributes : ratio float - The ratio value of the unit. Prime Objects class Prime(ctypes.Structure) Represents a Prime structure in C code. Attributes : longitude float - The longitude value of the prime meridian. Ellipsoid Objects class Ellipsoid(ctypes.Structure) Represents an Ellipsoid structure in C code. Attributes : a float - The semi-major axis of the ellipsoid. b float - The semi-minor axis of the ellipsoid. e float - The eccentricity of the ellipsoid. f float - The flattening of the ellipsoid. Datum Objects class Datum(ctypes.Structure) Represents a Datum structure in C code. Attributes : ellipsoid Ellipsoid - The ellipsoid associated with the datum. prime Prime - The prime meridian associated with the datum. ds float - The scale difference parameter. dx float - The X translation parameter. dy float - The Y translation parameter. dz float - The Z translation parameter. rx float - The X rotation parameter. ry float - The Y rotation parameter. rz float - The Z rotation parameter. Crs Objects class Crs(ctypes.Structure) Represents a Crs structure in C code. Attributes : datum Datum - The datum associated with the coordinate reference system. lambda0 float - The longitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the longitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0). Sometimes known as \u201ccentral meridian\u201d (CM). phi0 float - The latitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the latitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0). phi1 float - for a conic projection with two standard parallels, this is the latitude of one of the parallels of intersection of the cone with the ellipsoid. It is normally but not necessarily that nearest to the pole. Scale is true along this parallel. phi2 float - for a conic projection with two standard parallels, this is the latitude of one of the parallels at which the cone intersects with the ellipsoid. It is normally but not necessarily that nearest to the equator. Scale is true along this parallel. k0 float - the factor by which the map grid is reduced or enlarged during the projection process, defined by its value at the natural origin. x0 float - since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Easting, FE, is the value assigned to the abscissa (east or west) axis of the projection grid at the natural origin. y0 float - since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Northing, FN, is the value assigned to the ordinate (north or south) axis of the projection grid at the natural origin. azimut float - the azimuthal direction (north zero, east of north being positive) of the great circle which is the centre line of an oblique projection. The azimuth is given at the projection centre.","title":"C code"},{"location":"c-code/#module-epsglidesrc","text":"","title":"Module epsglide.src"},{"location":"c-code/#unit-objects","text":"class Unit(ctypes.Structure) Represents a Unit structure in C code. Attributes : ratio float - The ratio value of the unit.","title":"Unit Objects"},{"location":"c-code/#prime-objects","text":"class Prime(ctypes.Structure) Represents a Prime structure in C code. Attributes : longitude float - The longitude value of the prime meridian.","title":"Prime Objects"},{"location":"c-code/#ellipsoid-objects","text":"class Ellipsoid(ctypes.Structure) Represents an Ellipsoid structure in C code. Attributes : a float - The semi-major axis of the ellipsoid. b float - The semi-minor axis of the ellipsoid. e float - The eccentricity of the ellipsoid. f float - The flattening of the ellipsoid.","title":"Ellipsoid Objects"},{"location":"c-code/#datum-objects","text":"class Datum(ctypes.Structure) Represents a Datum structure in C code. Attributes : ellipsoid Ellipsoid - The ellipsoid associated with the datum. prime Prime - The prime meridian associated with the datum. ds float - The scale difference parameter. dx float - The X translation parameter. dy float - The Y translation parameter. dz float - The Z translation parameter. rx float - The X rotation parameter. ry float - The Y rotation parameter. rz float - The Z rotation parameter.","title":"Datum Objects"},{"location":"c-code/#crs-objects","text":"class Crs(ctypes.Structure) Represents a Crs structure in C code. Attributes : datum Datum - The datum associated with the coordinate reference system. lambda0 float - The longitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the longitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0). Sometimes known as \u201ccentral meridian\u201d (CM). phi0 float - The latitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the latitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0). phi1 float - for a conic projection with two standard parallels, this is the latitude of one of the parallels of intersection of the cone with the ellipsoid. It is normally but not necessarily that nearest to the pole. Scale is true along this parallel. phi2 float - for a conic projection with two standard parallels, this is the latitude of one of the parallels at which the cone intersects with the ellipsoid. It is normally but not necessarily that nearest to the equator. Scale is true along this parallel. k0 float - the factor by which the map grid is reduced or enlarged during the projection process, defined by its value at the natural origin. x0 float - since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Easting, FE, is the value assigned to the abscissa (east or west) axis of the projection grid at the natural origin. y0 float - since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Northing, FN, is the value assigned to the ordinate (north or south) axis of the projection grid at the natural origin. azimut float - the azimuthal direction (north zero, east of north being positive) of the great circle which is the centre line of an oblique projection. The azimuth is given at the projection centre.","title":"Crs Objects"},{"location":"dataset/","text":"Module epsglide.dataset epsglide.dataset.DATA Path where json dataset are stored. On each EPSG dataset request, json data are stored on this local path to allow introspection when needed and faster execution. DatasetConnexionError Objects class DatasetConnexionError(Exception) Exception raised when EPSG API is not available. DatasetNotFound Objects class DatasetNotFound(Exception) Exception raised when API call status code is not 200. DatasetIdentificationError Objects class DatasetIdentificationError(Exception) Exception raised when EpsgElement initialized with no info. DatumInitializationError Objects class DatumInitializationError(Exception) Exception raised when unmanageable datum parameter occurs. EpsgElement Objects class EpsgElement(object) Represents an EPSG dataset element. Attributes : _struct_ ctypes.Structure - object representing the structure of the equivalant C element. Arguments : code int - the EPSG code of the element. name str - the name of the element. Raises : DatasetIdentificationError - if either EPSG code or name is not provided. NotImplementedError - if searching by keyword is attempted (not implemented yet). EpsgElement.__repr__ def __repr__() Return a string representation of the EpsgElement object. Returns : str - a string representation of the object in the format <ClassName Code: Name> . EpsgElement.populate def populate() Populate the EPSG dataset element. This method is meant to be overridden by subclasses. Unit Objects class Unit(EpsgElement) Represents a unit in EPSG dataset. Attributes : ratio float - The ratio value of the unit. Unit.from_target def from_target(value: Union[int, float]) -> float Convert a value to the dataset specific unit. >>> u = epsglide.dataset.Unit(9003) >>> u <Unit 9003: US survey foot> >>> u.from_target(1) # convert one metre into US survey foot 3.2808333333333333 Arguments : value int|float - the value to be converted. Returns : float|None - the converted value, or None if no conversion is possible. Unit.to_target def to_target(value: Union[int, float]) -> float Convert a value to computation specific units. >>> u = epsglide.dataset.Unit(9002) >>> u <Unit 9002: foot> >>> u.to_target(1) # convert one international feet into meters 0.3048 Arguments : value int|float - the value to be converted. Returns : float|None - the converted value, or None if no conversion is possible. PrimeMeridian Objects class PrimeMeridian(EpsgElement) Represents a prime meridian in EPSG dataset. Attributes : longitude float - The longitude value of the prime meridian. Ellipsoid Objects class Ellipsoid(EpsgElement) Represents an ellipsoid model used in geodetic coordinate reference systems. Methods : populate - Populate the Ellipsoid object with necessary data, including parameters related to its shape and size. Ellipsoid.populate def populate() Populate the Ellipsoid object with necessary data. This method initializes the internal structure ( _struct_ ) of the Ellipsoid object with information about its semi-major axis, semi-minor axis, flattening, eccentricity, and other related parameters. The initialization process depends on whether the ellipsoid\u2019s inverse flattening is provided or calculated from its semi-major and semi-minor axes. GeodeticCoordRefSystem Objects class GeodeticCoordRefSystem(EpsgElement) Represents a geodetic coordinate reference system. Methods : populate - Populate the GeodeticCoordRefSystem object with necessary data, including datum and transformation parameters. GeodeticCoordRefSystem.populate def populate() Populate the GeodeticCoordRefSystem object with necessary data. This method initializes the internal structure ( _struct_ ) of the GeodeticCoordRefSystem object with information about the datum, ellipsoid, prime meridian, and transformation parameters. Raises : DatasetNotFound - If no transformation is found for the given coordinate reference system (CRS) code. DatumInitializationError - If an unmanageable transformation parameter is encountered during initialization.","title":"Dataset"},{"location":"dataset/#module-epsglidedataset","text":"","title":"Module epsglide.dataset"},{"location":"dataset/#epsglidedatasetdata","text":"Path where json dataset are stored. On each EPSG dataset request, json data are stored on this local path to allow introspection when needed and faster execution.","title":"epsglide.dataset.DATA"},{"location":"dataset/#datasetconnexionerror-objects","text":"class DatasetConnexionError(Exception) Exception raised when EPSG API is not available.","title":"DatasetConnexionError Objects"},{"location":"dataset/#datasetnotfound-objects","text":"class DatasetNotFound(Exception) Exception raised when API call status code is not 200.","title":"DatasetNotFound Objects"},{"location":"dataset/#datasetidentificationerror-objects","text":"class DatasetIdentificationError(Exception) Exception raised when EpsgElement initialized with no info.","title":"DatasetIdentificationError Objects"},{"location":"dataset/#datuminitializationerror-objects","text":"class DatumInitializationError(Exception) Exception raised when unmanageable datum parameter occurs.","title":"DatumInitializationError Objects"},{"location":"dataset/#epsgelement-objects","text":"class EpsgElement(object) Represents an EPSG dataset element. Attributes : _struct_ ctypes.Structure - object representing the structure of the equivalant C element. Arguments : code int - the EPSG code of the element. name str - the name of the element. Raises : DatasetIdentificationError - if either EPSG code or name is not provided. NotImplementedError - if searching by keyword is attempted (not implemented yet).","title":"EpsgElement Objects"},{"location":"dataset/#epsgelement__repr__","text":"def __repr__() Return a string representation of the EpsgElement object. Returns : str - a string representation of the object in the format <ClassName Code: Name> .","title":"EpsgElement.__repr__"},{"location":"dataset/#epsgelementpopulate","text":"def populate() Populate the EPSG dataset element. This method is meant to be overridden by subclasses.","title":"EpsgElement.populate"},{"location":"dataset/#unit-objects","text":"class Unit(EpsgElement) Represents a unit in EPSG dataset. Attributes : ratio float - The ratio value of the unit.","title":"Unit Objects"},{"location":"dataset/#unitfrom_target","text":"def from_target(value: Union[int, float]) -> float Convert a value to the dataset specific unit. >>> u = epsglide.dataset.Unit(9003) >>> u <Unit 9003: US survey foot> >>> u.from_target(1) # convert one metre into US survey foot 3.2808333333333333 Arguments : value int|float - the value to be converted. Returns : float|None - the converted value, or None if no conversion is possible.","title":"Unit.from_target"},{"location":"dataset/#unitto_target","text":"def to_target(value: Union[int, float]) -> float Convert a value to computation specific units. >>> u = epsglide.dataset.Unit(9002) >>> u <Unit 9002: foot> >>> u.to_target(1) # convert one international feet into meters 0.3048 Arguments : value int|float - the value to be converted. Returns : float|None - the converted value, or None if no conversion is possible.","title":"Unit.to_target"},{"location":"dataset/#primemeridian-objects","text":"class PrimeMeridian(EpsgElement) Represents a prime meridian in EPSG dataset. Attributes : longitude float - The longitude value of the prime meridian.","title":"PrimeMeridian Objects"},{"location":"dataset/#ellipsoid-objects","text":"class Ellipsoid(EpsgElement) Represents an ellipsoid model used in geodetic coordinate reference systems. Methods : populate - Populate the Ellipsoid object with necessary data, including parameters related to its shape and size.","title":"Ellipsoid Objects"},{"location":"dataset/#ellipsoidpopulate","text":"def populate() Populate the Ellipsoid object with necessary data. This method initializes the internal structure ( _struct_ ) of the Ellipsoid object with information about its semi-major axis, semi-minor axis, flattening, eccentricity, and other related parameters. The initialization process depends on whether the ellipsoid\u2019s inverse flattening is provided or calculated from its semi-major and semi-minor axes.","title":"Ellipsoid.populate"},{"location":"dataset/#geodeticcoordrefsystem-objects","text":"class GeodeticCoordRefSystem(EpsgElement) Represents a geodetic coordinate reference system. Methods : populate - Populate the GeodeticCoordRefSystem object with necessary data, including datum and transformation parameters.","title":"GeodeticCoordRefSystem Objects"},{"location":"dataset/#geodeticcoordrefsystempopulate","text":"def populate() Populate the GeodeticCoordRefSystem object with necessary data. This method initializes the internal structure ( _struct_ ) of the GeodeticCoordRefSystem object with information about the datum, ellipsoid, prime meridian, and transformation parameters. Raises : DatasetNotFound - If no transformation is found for the given coordinate reference system (CRS) code. DatumInitializationError - If an unmanageable transformation parameter is encountered during initialization.","title":"GeodeticCoordRefSystem.populate"},{"location":"epsglide/","text":"Module epsglide This package aims to perform simple requests to EPSG GeoRepository API and provides associated geodesic computation and map projection. distance def distance(obj: dataset.Ellipsoid, start: Geodetic, stop: Geodetic) -> Vincenty_dist Calculate the distance between two points on the ellipsoid surface. Arguments : obj dataset.Ellipsoid - The ellipsoid object representing the shape of the Earth. start Geodetic - The starting point. stop Geodetic - The destination point. Returns : Vincenty_dist - The distance between the two points. destination def destination(obj: dataset.Ellipsoid, start: Geodetic, dist: Vincenty_dist) -> Vincenty_dest Calculate the destination point given start point, initial bearing, and distance. Arguments : obj dataset.Ellipsoid - The ellipsoid object representing the shape of the Earth. start Geodetic - The starting point. dist Vincenty_dist - The distance to travel. Returns : Vincenty_dest - The destination point. to_crs def to_crs(obj: dataset.GeodeticCoordRefSystem, crs: dataset.GeodeticCoordRefSystem, lla: Geodetic) -> Geodetic Convert coordinates from one geodetic coordinate reference system to another. Arguments : obj dataset.GeodeticCoordRefSystem - The source coordinate reference system. crs dataset.GeodeticCoordRefSystem - The target coordinate reference system. lla Geodetic - The coordinates to convert. Returns : Geodetic - The converted coordinates. to_wgs84 def to_wgs84(obj: dataset.GeodeticCoordRefSystem, lla: Geodetic) -> Geodetic Convert coordinates from a geodetic coordinate reference system to WGS84. Arguments : obj dataset.GeodeticCoordRefSystem - The source coordinate reference system. lla Geodetic - The coordinates to convert. Returns : Geodetic - The converted coordinates in WGS84. ProjectedCoordRefSystem Objects class ProjectedCoordRefSystem(dataset.EpsgElement) Coordinate reference system object allowing projection of geodetic coordinates to flat map (geographic coordinates). >>> import epsglide >>> osgb36 = epsglide.ProjectedCoordRefSystem(27700) >>> london = epsglide.Geodetic(-0.127005, 51.518602, 0.) # use degrees >>> osgb36(london) <metre:1.000[X=529939.106 Y=181680.962] alt=0.000> >>> osgb36.Projection {'Code': 19916, 'Name': 'British National Grid', 'href': 'https://apps.epsg.org/api/v1/Conversion/19916'} Attributes : GeodeticCoordRefSystem dataset.GeodeticCoordRefSystem - geodetic reference system. Conversion dataset.Conversion - projection method and parameters. CoordOperationMethod dataset.CoordOperationMethod - projection description. CoordSystem dataset.CoordSystem - 2D coordinate system and units. parameters list - list of dataset.CoordOperationParameter . ProjectedCoordRefSystem.__call__ def __call__( element: typing.Union[Geodetic, Geographic] ) -> typing.Union[Geodetic, Geographic] ProjectedCoordRefSystem.transform def transform(element: typing.Union[Geodetic, Geographic], dest_crs) -> Geographic","title":"EPSGlide"},{"location":"epsglide/#module-epsglide","text":"This package aims to perform simple requests to EPSG GeoRepository API and provides associated geodesic computation and map projection.","title":"Module epsglide"},{"location":"epsglide/#distance","text":"def distance(obj: dataset.Ellipsoid, start: Geodetic, stop: Geodetic) -> Vincenty_dist Calculate the distance between two points on the ellipsoid surface. Arguments : obj dataset.Ellipsoid - The ellipsoid object representing the shape of the Earth. start Geodetic - The starting point. stop Geodetic - The destination point. Returns : Vincenty_dist - The distance between the two points.","title":"distance"},{"location":"epsglide/#destination","text":"def destination(obj: dataset.Ellipsoid, start: Geodetic, dist: Vincenty_dist) -> Vincenty_dest Calculate the destination point given start point, initial bearing, and distance. Arguments : obj dataset.Ellipsoid - The ellipsoid object representing the shape of the Earth. start Geodetic - The starting point. dist Vincenty_dist - The distance to travel. Returns : Vincenty_dest - The destination point.","title":"destination"},{"location":"epsglide/#to_crs","text":"def to_crs(obj: dataset.GeodeticCoordRefSystem, crs: dataset.GeodeticCoordRefSystem, lla: Geodetic) -> Geodetic Convert coordinates from one geodetic coordinate reference system to another. Arguments : obj dataset.GeodeticCoordRefSystem - The source coordinate reference system. crs dataset.GeodeticCoordRefSystem - The target coordinate reference system. lla Geodetic - The coordinates to convert. Returns : Geodetic - The converted coordinates.","title":"to_crs"},{"location":"epsglide/#to_wgs84","text":"def to_wgs84(obj: dataset.GeodeticCoordRefSystem, lla: Geodetic) -> Geodetic Convert coordinates from a geodetic coordinate reference system to WGS84. Arguments : obj dataset.GeodeticCoordRefSystem - The source coordinate reference system. lla Geodetic - The coordinates to convert. Returns : Geodetic - The converted coordinates in WGS84.","title":"to_wgs84"},{"location":"epsglide/#projectedcoordrefsystem-objects","text":"class ProjectedCoordRefSystem(dataset.EpsgElement) Coordinate reference system object allowing projection of geodetic coordinates to flat map (geographic coordinates). >>> import epsglide >>> osgb36 = epsglide.ProjectedCoordRefSystem(27700) >>> london = epsglide.Geodetic(-0.127005, 51.518602, 0.) # use degrees >>> osgb36(london) <metre:1.000[X=529939.106 Y=181680.962] alt=0.000> >>> osgb36.Projection {'Code': 19916, 'Name': 'British National Grid', 'href': 'https://apps.epsg.org/api/v1/Conversion/19916'} Attributes : GeodeticCoordRefSystem dataset.GeodeticCoordRefSystem - geodetic reference system. Conversion dataset.Conversion - projection method and parameters. CoordOperationMethod dataset.CoordOperationMethod - projection description. CoordSystem dataset.CoordSystem - 2D coordinate system and units. parameters list - list of dataset.CoordOperationParameter .","title":"ProjectedCoordRefSystem Objects"},{"location":"epsglide/#projectedcoordrefsystem__call__","text":"def __call__( element: typing.Union[Geodetic, Geographic] ) -> typing.Union[Geodetic, Geographic]","title":"ProjectedCoordRefSystem.__call__"},{"location":"epsglide/#projectedcoordrefsystemtransform","text":"def transform(element: typing.Union[Geodetic, Geographic], dest_crs) -> Geographic","title":"ProjectedCoordRefSystem.transform"},{"location":"geodesy/","text":"Module epsglide.geodesy Module for handling geodetic coordinates and their representations. This module provides functionality for working with geodetic coordinates, allowing for different representations and initialization methods. Supported representations: Maidenhead Geohash Georef GARS Even if angular value are stored in radians, initialisation and representation are done using degrees. Geodetic class can be imported from geodesy package module: >>> from epsglide.geodesy import Geodetic >>> dublin = Geodetic(-6.272877, 53.344606, 105.) # use degrees >>> london = Geodetic(-0.127005, 51.518602, 0.) # use degrees >>> dublin # show degrees in dms format <lon=-6.272877 lat=53.344606 alt=105.000> >>> london # show degrees in dms format <lon=-000d07m37.21800s lat=+051d31m6.96720s alt=0.0> >>> london.longitude # value is stored in radians -0.002216655416495398 Geodetic Objects class Geodetic(ctypes.Structure) ctypes structure for geodetic coordinates. This class also provides various standart initialization from various representation such as maidenhead , georef , geohash . The associated GARS area (5minx5min tile) can also be provided. >>> Geodetic.from_maidenhead('IO91wm44sl21gl14kb51om') # london <lon=-000d07m37.21800s lat=+051d31m6.96720s alt=0.0> >>> epsglide.Geodetic.from_georef('MKQG52883162') # london <lon=-000d07m36.90000s lat=+051d31m7.50000s alt=0.0> >>> Geodeis.from_geohash('gcpvj4et8e6pwdj0ft1k', center=True) # london <lon=-000d07m37.21800s lat=+051d31m6.96720s alt=0.0> >>> london.gars() '360MV46' Attributes : longitude float - longitude value of geodetic coordinates in radians. latitude float - latitude value of geodetic coordinates in radians. altitude float - elevation of the geodetic coordinates in meters. Geodetic.maidenhead def maidenhead(level: int = 4) -> str Convert coordinates to maidenhead representation. Precision can be set using level parameter. >>> dublin.maidenhead() 'IO63ui72gq' >>> dublin.maidenhead(level=6) 'IO63ui72gq19dh' Arguments : level int - precision level of maidenhead. Returns : str - Maidenhead string. Geodetic.from_maidenhead @staticmethod def from_maidenhead(maidenhead: str) Return Geodetic object from maidenhead string. Arguments : maidenhead str - maidenhead representation. Returns : epsglide.Geodetic - geodetic coordinates. A precision tuple (longitude, latitude) in degrees is added as class attribute. >>> Geodetic.from_maidenhead('IO63ui72gq').precision (0.00015624999999999998, 0.00015624999999999998) >>> Geodetic.from_maidenhead('IO63ui72gq19dh').precision (6.510416666666665e-07, 6.510416666666665e-07) Geodetic.georef def georef(digit: int = 8) -> str Convert coordinates to georef. Best precision can be set with a maximul of 8 digit (default). With this level, the precision is about 8.3e-05 degrees in longitude and latitude. >>> dublin.georef() 'MKJJ43322037' >>> dublin.georef(digit=6) 'MKJJ433203' Arguments : digit int - digit number of georef (can be 4, 6 or 8). Returns : str - georef representation. Geodetic.from_georef @staticmethod def from_georef(georef: str) Return Geodetic object from georef. >>> Geodetic.from_georef('MKJJ433220') <lon=-006d15m57.000s lat=+053d22m45.000s alt=0.000> >>> Geodetic.from_georef('MKJJ43322037') <lon=-006d16m21.900s lat=+053d20m41.100s alt=0.000> Arguments : georef str - georef representation. Returns : epsglide.Geodetic - geodetic coordinates. A precision tuple (longitude, latitude) in degrees is added as class attribute. >>> epsglide.Geodetic.from_georef('MKJJ433220').precision (0.0008333333333333333, 0.0008333333333333333) >>> Geodetic.from_georef('MKJJ43322037').precision (8.333333333333333e-05, 8.333333333333333e-05) Geodetic.gars def gars() -> str Get the associated GARS Area (5minx5min tile). >>> dublin.gars() '348MY16' Geodetic.from_gars @staticmethod def from_gars(gars: str, anchor: str = \"\") Return Geodetic object from gars. Optional anchor value to define where to handle 5minx5min tile. >>> Geodetic.from_gars('348MY16', anchor=\"nw\") <lon=-006d20m0.000s lat=+053d25m0.000s alt=0.000> >>> epsg.Geodetic.from_gars('348MY16') <lon=-006d17m30.000s lat=+053d22m30.000s alt=0.000> Arguments : gars str - gars representation. anchor str - tile anchor using n , e , s or w . Returns : epsglide.Geodetic - geodetic coordinates. Global precision of centered GARS coordinates is about 0.0833 degrees in longitude ad latitude. Geodetic.geohash def geohash(digit: int = 10, base: str = \"0123456789bcdefghjkmnpqrstuvwxyz\") -> str Convert coordinates to geohash. Precision can be set using digit parameter. >>> london.geohash() 'gcpvj4et8e' Arguments : digit int - digit number of geohash [default: 10]. base str - a 32-sized string of unique caracter. Same base should be used to decode correctly the geohash. Returns : str - geohash representation. Geodetic.from_geohash @staticmethod def from_geohash(geohash: str, base: str = \"0123456789bcdefghjkmnpqrstuvwxyz\", center: bool = True) Return Geodetic object from geohash. >>> Geodetic.from_geohash('gcpvj4et8e') <lon=-000d07m37.19969s lat=+051d31m6.97229s alt=0.0> Arguments : base str - a 32-sized string of unique caracter used to encode the geodetic coordinates. Returns : epsglide.Geodetic - geodetic coordinates. A precision tuple (longitude, latitude) in degrees is added as class attribute. >>> epsglide.Geodetic.from_geohash('gcpvj4et8e').precision (2.682209014892578e-06, 1.341104507446289e-06) Geodetic.url_load_location def url_load_location(url, **kwargs) Return a static map image data from map provider. >>> # below a mapbox-static-map url centered on [lon, lat] with a red >>> # pin, width, height and zoom to be specified on call >>> url = \"https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/static\" ... \"/pin-s+f74e4e(%(lon)f,%(lat)f)/%(lon)f,%(lat)f,%(zoom)d,0\" ... \"/%(width)dx%(height)d?access_token=%(token)s\" >>> data = dublin.url_load_location( ... url, zoom=15, width=600, height=400, token=\"xx-xxxxxx-xx\" ... ) >>> # see `epsg.geodesy.Geodetic.dump_location` >>> with io.open(\"dump.png\", \"wb\") as f: ... f.write(data) Arguments : url str - map provider url containing %(lon)f and %(lat)f format expression to be replaced by longitude and latitude in the proper unit according to map provider. **kwargs dict - key-value pairs to match entries in url according to python string formatting. Returns : Image data as bytes (py3) or str (py2). Geodetic.dump_location def dump_location(name, url, **kwargs) Dump a static map image from map provider into filesystem. Arguments : name str - a valid filepath. url str - map provider url containing %(lon)f and %(lat)f format expression to be replaced by longitude and latitude found in GPS data. **kwargs dict - key-value pairs to match entries in url according to python string formatting.","title":"Geodesy"},{"location":"geodesy/#module-epsglidegeodesy","text":"Module for handling geodetic coordinates and their representations. This module provides functionality for working with geodetic coordinates, allowing for different representations and initialization methods. Supported representations: Maidenhead Geohash Georef GARS Even if angular value are stored in radians, initialisation and representation are done using degrees. Geodetic class can be imported from geodesy package module: >>> from epsglide.geodesy import Geodetic >>> dublin = Geodetic(-6.272877, 53.344606, 105.) # use degrees >>> london = Geodetic(-0.127005, 51.518602, 0.) # use degrees >>> dublin # show degrees in dms format <lon=-6.272877 lat=53.344606 alt=105.000> >>> london # show degrees in dms format <lon=-000d07m37.21800s lat=+051d31m6.96720s alt=0.0> >>> london.longitude # value is stored in radians -0.002216655416495398","title":"Module epsglide.geodesy"},{"location":"geodesy/#geodetic-objects","text":"class Geodetic(ctypes.Structure) ctypes structure for geodetic coordinates. This class also provides various standart initialization from various representation such as maidenhead , georef , geohash . The associated GARS area (5minx5min tile) can also be provided. >>> Geodetic.from_maidenhead('IO91wm44sl21gl14kb51om') # london <lon=-000d07m37.21800s lat=+051d31m6.96720s alt=0.0> >>> epsglide.Geodetic.from_georef('MKQG52883162') # london <lon=-000d07m36.90000s lat=+051d31m7.50000s alt=0.0> >>> Geodeis.from_geohash('gcpvj4et8e6pwdj0ft1k', center=True) # london <lon=-000d07m37.21800s lat=+051d31m6.96720s alt=0.0> >>> london.gars() '360MV46' Attributes : longitude float - longitude value of geodetic coordinates in radians. latitude float - latitude value of geodetic coordinates in radians. altitude float - elevation of the geodetic coordinates in meters.","title":"Geodetic Objects"},{"location":"geodesy/#geodeticmaidenhead","text":"def maidenhead(level: int = 4) -> str Convert coordinates to maidenhead representation. Precision can be set using level parameter. >>> dublin.maidenhead() 'IO63ui72gq' >>> dublin.maidenhead(level=6) 'IO63ui72gq19dh' Arguments : level int - precision level of maidenhead. Returns : str - Maidenhead string.","title":"Geodetic.maidenhead"},{"location":"geodesy/#geodeticfrom_maidenhead","text":"@staticmethod def from_maidenhead(maidenhead: str) Return Geodetic object from maidenhead string. Arguments : maidenhead str - maidenhead representation. Returns : epsglide.Geodetic - geodetic coordinates. A precision tuple (longitude, latitude) in degrees is added as class attribute. >>> Geodetic.from_maidenhead('IO63ui72gq').precision (0.00015624999999999998, 0.00015624999999999998) >>> Geodetic.from_maidenhead('IO63ui72gq19dh').precision (6.510416666666665e-07, 6.510416666666665e-07)","title":"Geodetic.from_maidenhead"},{"location":"geodesy/#geodeticgeoref","text":"def georef(digit: int = 8) -> str Convert coordinates to georef. Best precision can be set with a maximul of 8 digit (default). With this level, the precision is about 8.3e-05 degrees in longitude and latitude. >>> dublin.georef() 'MKJJ43322037' >>> dublin.georef(digit=6) 'MKJJ433203' Arguments : digit int - digit number of georef (can be 4, 6 or 8). Returns : str - georef representation.","title":"Geodetic.georef"},{"location":"geodesy/#geodeticfrom_georef","text":"@staticmethod def from_georef(georef: str) Return Geodetic object from georef. >>> Geodetic.from_georef('MKJJ433220') <lon=-006d15m57.000s lat=+053d22m45.000s alt=0.000> >>> Geodetic.from_georef('MKJJ43322037') <lon=-006d16m21.900s lat=+053d20m41.100s alt=0.000> Arguments : georef str - georef representation. Returns : epsglide.Geodetic - geodetic coordinates. A precision tuple (longitude, latitude) in degrees is added as class attribute. >>> epsglide.Geodetic.from_georef('MKJJ433220').precision (0.0008333333333333333, 0.0008333333333333333) >>> Geodetic.from_georef('MKJJ43322037').precision (8.333333333333333e-05, 8.333333333333333e-05)","title":"Geodetic.from_georef"},{"location":"geodesy/#geodeticgars","text":"def gars() -> str Get the associated GARS Area (5minx5min tile). >>> dublin.gars() '348MY16'","title":"Geodetic.gars"},{"location":"geodesy/#geodeticfrom_gars","text":"@staticmethod def from_gars(gars: str, anchor: str = \"\") Return Geodetic object from gars. Optional anchor value to define where to handle 5minx5min tile. >>> Geodetic.from_gars('348MY16', anchor=\"nw\") <lon=-006d20m0.000s lat=+053d25m0.000s alt=0.000> >>> epsg.Geodetic.from_gars('348MY16') <lon=-006d17m30.000s lat=+053d22m30.000s alt=0.000> Arguments : gars str - gars representation. anchor str - tile anchor using n , e , s or w . Returns : epsglide.Geodetic - geodetic coordinates. Global precision of centered GARS coordinates is about 0.0833 degrees in longitude ad latitude.","title":"Geodetic.from_gars"},{"location":"geodesy/#geodeticgeohash","text":"def geohash(digit: int = 10, base: str = \"0123456789bcdefghjkmnpqrstuvwxyz\") -> str Convert coordinates to geohash. Precision can be set using digit parameter. >>> london.geohash() 'gcpvj4et8e' Arguments : digit int - digit number of geohash [default: 10]. base str - a 32-sized string of unique caracter. Same base should be used to decode correctly the geohash. Returns : str - geohash representation.","title":"Geodetic.geohash"},{"location":"geodesy/#geodeticfrom_geohash","text":"@staticmethod def from_geohash(geohash: str, base: str = \"0123456789bcdefghjkmnpqrstuvwxyz\", center: bool = True) Return Geodetic object from geohash. >>> Geodetic.from_geohash('gcpvj4et8e') <lon=-000d07m37.19969s lat=+051d31m6.97229s alt=0.0> Arguments : base str - a 32-sized string of unique caracter used to encode the geodetic coordinates. Returns : epsglide.Geodetic - geodetic coordinates. A precision tuple (longitude, latitude) in degrees is added as class attribute. >>> epsglide.Geodetic.from_geohash('gcpvj4et8e').precision (2.682209014892578e-06, 1.341104507446289e-06)","title":"Geodetic.from_geohash"},{"location":"geodesy/#geodeticurl_load_location","text":"def url_load_location(url, **kwargs) Return a static map image data from map provider. >>> # below a mapbox-static-map url centered on [lon, lat] with a red >>> # pin, width, height and zoom to be specified on call >>> url = \"https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/static\" ... \"/pin-s+f74e4e(%(lon)f,%(lat)f)/%(lon)f,%(lat)f,%(zoom)d,0\" ... \"/%(width)dx%(height)d?access_token=%(token)s\" >>> data = dublin.url_load_location( ... url, zoom=15, width=600, height=400, token=\"xx-xxxxxx-xx\" ... ) >>> # see `epsg.geodesy.Geodetic.dump_location` >>> with io.open(\"dump.png\", \"wb\") as f: ... f.write(data) Arguments : url str - map provider url containing %(lon)f and %(lat)f format expression to be replaced by longitude and latitude in the proper unit according to map provider. **kwargs dict - key-value pairs to match entries in url according to python string formatting. Returns : Image data as bytes (py3) or str (py2).","title":"Geodetic.url_load_location"},{"location":"geodesy/#geodeticdump_location","text":"def dump_location(name, url, **kwargs) Dump a static map image from map provider into filesystem. Arguments : name str - a valid filepath. url str - map provider url containing %(lon)f and %(lat)f format expression to be replaced by longitude and latitude found in GPS data. **kwargs dict - key-value pairs to match entries in url according to python string formatting.","title":"Geodetic.dump_location"}]}